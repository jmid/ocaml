name: Build

on:
  push:
    branches:
      - '4.**'
      - '5.**'
      - 'trunk'
  pull_request:

# Restrict the GITHUB_TOKEN
permissions: {}

env:
  # List of test directories for the debug-s4096 and linux-O0 jobs. These
  # directories are selected because of their tendencies to reach corner cases
  # in the runtime system.
  PARALLEL_TESTS: parallel callback gc-roots weak-ephe-final
  # Fully print commands executed by Make
  # MAKEFLAGS: V=1

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
# Concurrent workflows are grouped by the PR or branch that triggered them
# (github.ref) and the name of the workflow (github.workflow). The
# 'cancel-in-progress' option then make sure that only one workflow is running
# at a time. This doesn't prevent new jobs from running, rather it cancels
# already running jobs before scheduling new jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'pull_request' || github.sha }}
  cancel-in-progress: true

jobs:
# This job will do the initial build of the compiler (on linux), with flambda on.
# We then upload the compiler tree as a build artifact to enable re-use in
# subsequent jobs.
  build:
    runs-on: 'ubuntu-latest'
    outputs:
      manual_changed: ${{ steps.manual.outputs.manual_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Check for manual changes
        id: manual
        run: >-
         tools/ci/actions/check-manual-modified.sh
         '${{ github.ref }}'
         '${{ github.event_name }}'
         '${{ github.event.pull_request.base.ref }}'
         '${{ github.event.pull_request.base.sha }}'
         '${{ github.event.pull_request.head.ref }}'
         '${{ github.event.pull_request.head.sha }}'
         '${{ github.event.ref }}'
         '${{ github.event.before }}'
         '${{ github.event.ref }}'
         '${{ github.event.after }}'
         '${{ github.event.repository.full_name }}'
      - name: Configure tree
        run: |
          MAKE_ARG=-j CONFIG_ARG='--enable-flambda --enable-cmm-invariants --enable-dependency-generation --enable-native-toplevel' OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh configure
      - name: Build
        run: |
          MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
      - name: Prepare Artifact
        run: tar --zstd -cf /tmp/sources.tar.zstd .
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compiler
          path: /tmp/sources.tar.zstd
          retention-days: 1

# Full testsuite run, and other sanity checks
# "extra" testsuite runs, reusing the previously built compiler tree.
# debug: running the full testsuite with the
#        debug runtime and minor heap verification.
# debug-s4096: select testsuite run with the debug runtime and a small
#              minor heap.
  normal:
    name: ${{ matrix.name }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - id: normal
            name: normal
            dependencies: texlive-latex-extra texlive-fonts-recommended hevea sass
          - id: debug
            name: extra (debug)
          - id: debug-s4096
            name: extra (debug-s4096)
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: compiler
      - name: Unpack Artifact
        run: |
          tar --zstd -xf sources.tar.zstd
          rm -f sources.tar.zstd
      - name: Packages
        if: matrix.dependencies != ''
        run: |
          sudo apt-get update -y && sudo apt-get install -y ${{ matrix.dependencies }}
      - name: Run the testsuite
        if: matrix.id == 'normal'
        run: |
          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh test
      - name: Run the testsuite (debug runtime)
        if: matrix.id == 'debug'
        env:
          OCAMLRUNPARAM: v=0,V=1
          USE_RUNTIME: d
        run: |
          bash -cxe "SHOW_TIMINGS=1 tools/ci/actions/runner.sh test"
      - name: Run the testsuite (s=4096, debug runtime)
        if: matrix.id == 'debug-s4096'
        env:
          OCAMLRUNPARAM: s=4096,v=0
          USE_RUNTIME: d
        run: |
          for dir in $PARALLEL_TESTS; do \
            bash -cxe "SHOW_TIMINGS=1 tools/ci/actions/runner.sh test_prefix $dir"; \
          done
      - name: Build API Documentation
        if: matrix.id == 'normal'
        run: |
          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh api-docs
      - name: Install
        if: matrix.id == 'normal'
        run: |
         MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh install
      - name: Build the manual
        if: matrix.id == 'normal' && needs.build.outputs.manual_changed == 'true'
        run: |
          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh manual
      - name: Other checks
        if: matrix.id == 'normal'
        run: |
          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh other-checks


# normal: running the multicoretests suite
# debug: running the multicoretests suite with the
#        debug runtime, minor heap verification, and a small minor heap.
  multicoretests:
    name: 'Run multicoretests'
    needs: build
    runs-on: 'ubuntu-latest'
    if: contains(github.event.pull_request.labels.*.name, 'run-multicoretests')
    strategy:
      matrix:
        include:
          - id: normal
            name: normal
          - id: debug
            name: debug
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: compiler
      - name: Unpack Artifact
        run: |
          tar --zstd -xf sources.tar.zstd
          rm -f sources.tar.zstd
      - name: Install Artifact
        run: |
          make install

      - name: Fetch dune
        uses: actions/checkout@v4
        with:
          repository: ocaml/dune
          ref: 3.16.0
          path: dune

      - name: Compile dune
        shell: bash -e {0}
        run: |
          export PATH="/home/runner/local/bin:$PATH"                                                        #
          export CAML_LD_LIBRARY_PATH='/home/runner/local/lib/ocaml/stublibs:/home/runner/local/lib/ocaml'  #
          export PREFIX='/home/runner/local'                                                                #
          cd dune                                                                                           #
          touch dune-workspace                                                                              #
          make release                                                                                      #
          make install                                                                                      #

      - name: Display configuration and set up PATH
        run: |
          /home/runner/local/bin/ocamlc -config
          /home/runner/local/bin/dune --version
          echo "/home/runner/local/bin" >> $GITHUB_PATH

      - name: Fetch multicoretests
        uses: actions/checkout@v4
        with:
          repository: ocaml-multicore/multicoretests
          path: multicoretests

      - name: Fetch QCheck
        uses: actions/checkout@v4
        with:
          repository: c-cube/qcheck
          path: multicoretests/qcheck

      - name: Build multicoretests
        if: matrix.id == 'normal'
        shell: bash -e {0}
        run: |
          cd multicoretests                         #
          dune build src/                           #

      - name: Run multicoretests
        if: matrix.id == 'normal'
        env:
          QCHECK_MSG_INTERVAL: 60
        run: |
          cd multicoretests
          dune runtest -j1 --no-buffer --display=quiet --cache=disabled --error-reporting=twice src/

      - name: Build multicoretests (debug runtime)
        if: matrix.id == 'debug'
        shell: bash -e {0}
        run: |
          cd multicoretests                         #
          dune build --profile=debug-runtime src/   #

      - name: Run multicoretests (debug runtime)
        if: matrix.id == 'debug'
        env:
          QCHECK_MSG_INTERVAL: 60
          OCAMLRUNPARAM: s=4096,v=0,V=1
          USE_RUNTIME: d
        run: |
          cd multicoretests
          dune runtest -j1 --no-buffer --display=quiet --cache=disabled --error-reporting=twice --profile=debug-runtime src/
